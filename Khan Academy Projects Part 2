-- Project: using JOIN function to combine to datasets
CREATE TABLE persons (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    age INTEGER);
    
INSERT INTO persons (name, age) VALUES ("Bobby McBobbyFace", 12);
INSERT INTO persons (name, age) VALUES ("Lucy BoBucie", 25);
INSERT INTO persons (name, age) VALUES ("Banana FoFanna", 14);
INSERT INTO persons (name, age) VALUES ("Shish Kabob", 20);
INSERT INTO persons (name, age) VALUES ("Fluffy Sparkles", 8);
insert into persons (name, age) values ("Hailee Steinfeld", 26);

CREATE table hobbies (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    person_id INTEGER,
    name TEXT);
    
INSERT INTO hobbies (person_id, name) VALUES (1, "drawing");
INSERT INTO hobbies (person_id, name) VALUES (1, "coding");
INSERT INTO hobbies (person_id, name) VALUES (2, "dancing");
INSERT INTO hobbies (person_id, name) VALUES (2, "coding");
INSERT INTO hobbies (person_id, name) VALUES (3, "skating");
INSERT INTO hobbies (person_id, name) VALUES (3, "rowing");
INSERT INTO hobbies (person_id, name) VALUES (3, "drawing");
INSERT INTO hobbies (person_id, name) VALUES (4, "coding");
INSERT INTO hobbies (person_id, name) VALUES (4, "dilly-dallying");
INSERT INTO hobbies (person_id, name) VALUES (4, "meowing");
insert into hobbies (person_id, name) values (5, "singing");

SELECT * FROM persons;
SELECT * FROM hobbies;

select persons.name, hobbies.name from persons
join hobbies on hobbies.person_id = persons.id;

-- Using the WHERE function to find a specific individual
select persons.name, hobbies.name from persons
join hobbies on hobbies.person_id = persons.id
where persons.name = "Bobby McBobbyFace";


-- Project: LEFT OUTER JOIN example
CREATE TABLE customers (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT,
    email TEXT);
    
INSERT INTO customers (name, email) VALUES ("Doctor Who", "doctorwho@timelords.com");
INSERT INTO customers (name, email) VALUES ("Harry Potter", "harry@potter.com");
INSERT INTO customers (name, email) VALUES ("Captain Awesome", "captain@awesome.com");

CREATE TABLE orders (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    customer_id INTEGER,
    item TEXT,
    price REAL);

INSERT INTO orders (customer_id, item, price)
    VALUES (1, "Sonic Screwdriver", 1000.00);
INSERT INTO orders (customer_id, item, price)
    VALUES (2, "High Quality Broomstick", 40.00);
INSERT INTO orders (customer_id, item, price)
    VALUES (1, "TARDIS", 1000000.00);

select customers.name, customers.email, orders.item, orders.price from customers
left outer join orders
on customers.id = orders.customer_id;

select customers.name, customers.email, sum(orders.price) as total_price from customers
left outer join orders
on customers.id = orders.customer_id
group by customers.name
order by orders.price desc;


-- Project: another LEFT OUTER JOIN example to present the Harry Potter films with their respective sequel
CREATE TABLE movies (id INTEGER PRIMARY KEY AUTOINCREMENT,
    title TEXT,
    released INTEGER,
    sequel_id INTEGER);

INSERT INTO movies 
    VALUES (1, "Harry Potter and the Philosopher's Stone", 2001, 2);
INSERT INTO movies 
    VALUES (2, "Harry Potter and the Chamber of Secrets", 2002, 3);
INSERT INTO movies 
    VALUES (3, "Harry Potter and the Prisoner of Azkaban", 2004, 4);
INSERT INTO movies 
    VALUES (4, "Harry Potter and the Goblet of Fire", 2005, 5);
INSERT INTO movies 
    VALUES (5, "Harry Potter and the Order of the Phoenix ", 2007, 6);
INSERT INTO movies 
    VALUES (6, "Harry Potter and the Half-Blood Prince", 2009, 7);
INSERT INTO movies 
    VALUES (7, "Harry Potter and the Deathly Hallows – Part 1", 2010, 8);
INSERT INTO movies 
    VALUES (8, "Harry Potter and the Deathly Hallows – Part 2", 2011, NULL);

select movies.title as "movie_title", sequel.title as "sequel_title" from movies
left outer join movies sequel
on movies.sequel_id = sequel.id


-- Project: The last JOIN function project
CREATE TABLE famous_people (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    full_name TEXT,
    age INTEGER,
    job_id INTEGER);
    
INSERT INTO famous_people (full_name, age, job_id) VALUES ("Florence Pugh", "27", "1");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("Tom Holland", "26", "1");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("Hailee Steinfeld", "26", "3");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("Elizabeth Olsen", "33", "1");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("Zendaya", "26", "2");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("Dove Cameron", "27", "3");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("Omar Apollo", "25", "3");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("Selena Gomez", "30", "2");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("Ross Lynch", "27", "3");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("The Weeknd", "32", "3");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("Will Smith", "54", "1");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("Anya Taylor-Joy", "26", "2");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("Steven Speilberg", "76", "4");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("George Lucas", "78", "4");
INSERT INTO famous_people (full_name, age, job_id) VALUES ("Patty Jenkins", "51", "4");

CREATE TABLE occupations (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    occupation TEXT,
    occupation_id INTEGER);
    
INSERT INTO occupations (occupation, occupation_id) VALUES ("Actor", "1");
INSERT INTO occupations (occupation, occupation_id) VALUES ("Model", "2");
INSERT INTO occupations (occupation, occupation_id) VALUES ("Singer", "3");
INSERT INTO occupations (occupation, occupation_id) VALUES ("Filmmaker", "4");
    
SELECT famous_people.full_name, occupations.occupation, famous_people.age FROM famous_people
join occupations
on famous_people.job_id = occupations.occupation_id;
